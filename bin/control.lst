                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module control
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _HandleVendorRequest
                                     12 	.globl _HandleClassRequest
                                     13 	.globl _HandleStandardRequest
                                     14 	.globl _EP0ACK
                                     15 	.globl _SendControlResponse
                                     16 	.globl _RI
                                     17 	.globl _TI
                                     18 	.globl _RB8
                                     19 	.globl _TB8
                                     20 	.globl _REN
                                     21 	.globl _SM2
                                     22 	.globl _SM1
                                     23 	.globl _SM0
                                     24 	.globl _RXD
                                     25 	.globl _TXD
                                     26 	.globl _INT0
                                     27 	.globl _INT1
                                     28 	.globl _T0
                                     29 	.globl _T1
                                     30 	.globl _WR
                                     31 	.globl _RD
                                     32 	.globl _PX0
                                     33 	.globl _PT0
                                     34 	.globl _PX1
                                     35 	.globl _PT1
                                     36 	.globl _PS
                                     37 	.globl _EX0
                                     38 	.globl _ET0
                                     39 	.globl _EX1
                                     40 	.globl _ET1
                                     41 	.globl _ES
                                     42 	.globl _EA
                                     43 	.globl _IT0
                                     44 	.globl _IE0
                                     45 	.globl _IT1
                                     46 	.globl _IE1
                                     47 	.globl _TR0
                                     48 	.globl _TF0
                                     49 	.globl _TR1
                                     50 	.globl _TF1
                                     51 	.globl _P
                                     52 	.globl _OV
                                     53 	.globl _RS0
                                     54 	.globl _RS1
                                     55 	.globl _F0
                                     56 	.globl _AC
                                     57 	.globl _CY
                                     58 	.globl _SBUF
                                     59 	.globl _SCON
                                     60 	.globl _IP
                                     61 	.globl _IE
                                     62 	.globl _TH1
                                     63 	.globl _TH0
                                     64 	.globl _TL1
                                     65 	.globl _TL0
                                     66 	.globl _TMOD
                                     67 	.globl _TCON
                                     68 	.globl _PCON
                                     69 	.globl _DPH
                                     70 	.globl _DPL
                                     71 	.globl _SP
                                     72 	.globl _B
                                     73 	.globl _ACC
                                     74 	.globl _PSW
                                     75 	.globl _P3
                                     76 	.globl _P2
                                     77 	.globl _P1
                                     78 	.globl _P0
                                     79 	.globl _PRAMCTL
                                     80 	.globl _BANK2PAH
                                     81 	.globl _BANK2PAL
                                     82 	.globl _BANK2VA
                                     83 	.globl _BANK1PAH
                                     84 	.globl _BANK1PAL
                                     85 	.globl _BANK1VA
                                     86 	.globl _BANK0PAH
                                     87 	.globl _BANK0PAL
                                     88 	.globl _WARMSTATUS
                                     89 	.globl _GPIO0OUT
                                     90 	.globl _GPIO0DIR
                                     91 	.globl _DMACMD
                                     92 	.globl _DMAFILL3
                                     93 	.globl _DMAFILL2
                                     94 	.globl _DMAFILL1
                                     95 	.globl _DMAFILL0
                                     96 	.globl _DMASIZEH
                                     97 	.globl _DMASIZEM
                                     98 	.globl _DMASIZEL
                                     99 	.globl _DMADSTH
                                    100 	.globl _DMADSTM
                                    101 	.globl _DMADSTL
                                    102 	.globl _DMASRCH
                                    103 	.globl _DMASRCM
                                    104 	.globl _DMASRCL
                                    105 	.globl _NANDCSDIR
                                    106 	.globl _NANDCSOUT
                                    107 	.globl _EP4
                                    108 	.globl _EP3
                                    109 	.globl _EP2
                                    110 	.globl _EP1
                                    111 	.globl _EP0
                                    112 	.globl _SETUPDAT
                                    113 	.globl _EP0CS
                                    114 	.globl _EPIE
                                    115 	.globl _EPIRQ
                                    116 	.globl _USBIRQ
                                    117 	.globl _USBSTAT
                                    118 	.globl _USBCTL
                                    119 	.globl _REGBANK
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 	.area RSEG    (ABS,DATA)
      000000                        124 	.org 0x0000
                           000080   125 _P0	=	0x0080
                           000090   126 _P1	=	0x0090
                           0000A0   127 _P2	=	0x00a0
                           0000B0   128 _P3	=	0x00b0
                           0000D0   129 _PSW	=	0x00d0
                           0000E0   130 _ACC	=	0x00e0
                           0000F0   131 _B	=	0x00f0
                           000081   132 _SP	=	0x0081
                           000082   133 _DPL	=	0x0082
                           000083   134 _DPH	=	0x0083
                           000087   135 _PCON	=	0x0087
                           000088   136 _TCON	=	0x0088
                           000089   137 _TMOD	=	0x0089
                           00008A   138 _TL0	=	0x008a
                           00008B   139 _TL1	=	0x008b
                           00008C   140 _TH0	=	0x008c
                           00008D   141 _TH1	=	0x008d
                           0000A8   142 _IE	=	0x00a8
                           0000B8   143 _IP	=	0x00b8
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           0000D7   151 _CY	=	0x00d7
                           0000D6   152 _AC	=	0x00d6
                           0000D5   153 _F0	=	0x00d5
                           0000D4   154 _RS1	=	0x00d4
                           0000D3   155 _RS0	=	0x00d3
                           0000D2   156 _OV	=	0x00d2
                           0000D0   157 _P	=	0x00d0
                           00008F   158 _TF1	=	0x008f
                           00008E   159 _TR1	=	0x008e
                           00008D   160 _TF0	=	0x008d
                           00008C   161 _TR0	=	0x008c
                           00008B   162 _IE1	=	0x008b
                           00008A   163 _IT1	=	0x008a
                           000089   164 _IE0	=	0x0089
                           000088   165 _IT0	=	0x0088
                           0000AF   166 _EA	=	0x00af
                           0000AC   167 _ES	=	0x00ac
                           0000AB   168 _ET1	=	0x00ab
                           0000AA   169 _EX1	=	0x00aa
                           0000A9   170 _ET0	=	0x00a9
                           0000A8   171 _EX0	=	0x00a8
                           0000BC   172 _PS	=	0x00bc
                           0000BB   173 _PT1	=	0x00bb
                           0000BA   174 _PX1	=	0x00ba
                           0000B9   175 _PT0	=	0x00b9
                           0000B8   176 _PX0	=	0x00b8
                           0000B7   177 _RD	=	0x00b7
                           0000B6   178 _WR	=	0x00b6
                           0000B5   179 _T1	=	0x00b5
                           0000B4   180 _T0	=	0x00b4
                           0000B3   181 _INT1	=	0x00b3
                           0000B2   182 _INT0	=	0x00b2
                           0000B1   183 _TXD	=	0x00b1
                           0000B0   184 _RXD	=	0x00b0
                           00009F   185 _SM0	=	0x009f
                           00009E   186 _SM1	=	0x009e
                           00009D   187 _SM2	=	0x009d
                           00009C   188 _REN	=	0x009c
                           00009B   189 _TB8	=	0x009b
                           00009A   190 _RB8	=	0x009a
                           000099   191 _TI	=	0x0099
                           000098   192 _RI	=	0x0098
                                    193 ;--------------------------------------------------------
                                    194 ; overlayable register banks
                                    195 ;--------------------------------------------------------
                                    196 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        197 	.ds 8
                                    198 ;--------------------------------------------------------
                                    199 ; internal ram data
                                    200 ;--------------------------------------------------------
                                    201 	.area DSEG    (DATA)
                                    202 ;--------------------------------------------------------
                                    203 ; overlayable items in internal ram 
                                    204 ;--------------------------------------------------------
                                    205 ;--------------------------------------------------------
                                    206 ; indirectly addressable internal ram data
                                    207 ;--------------------------------------------------------
                                    208 	.area ISEG    (DATA)
                                    209 ;--------------------------------------------------------
                                    210 ; absolute internal ram data
                                    211 ;--------------------------------------------------------
                                    212 	.area IABS    (ABS,DATA)
                                    213 	.area IABS    (ABS,DATA)
                                    214 ;--------------------------------------------------------
                                    215 ; bit data
                                    216 ;--------------------------------------------------------
                                    217 	.area BSEG    (BIT)
                                    218 ;--------------------------------------------------------
                                    219 ; paged external ram data
                                    220 ;--------------------------------------------------------
                                    221 	.area PSEG    (PAG,XDATA)
                                    222 ;--------------------------------------------------------
                                    223 ; external ram data
                                    224 ;--------------------------------------------------------
                                    225 	.area XSEG    (XDATA)
                           00F000   226 _REGBANK	=	0xf000
                           00F008   227 _USBCTL	=	0xf008
                           00F009   228 _USBSTAT	=	0xf009
                           00F027   229 _USBIRQ	=	0xf027
                           00F020   230 _EPIRQ	=	0xf020
                           00F030   231 _EPIE	=	0xf030
                           00F048   232 _EP0CS	=	0xf048
                           00F0B8   233 _SETUPDAT	=	0xf0b8
                           00F1C0   234 _EP0	=	0xf1c0
                           00F200   235 _EP1	=	0xf200
                           00F240   236 _EP2	=	0xf240
                           00F280   237 _EP3	=	0xf280
                           00F2C0   238 _EP4	=	0xf2c0
                           00F608   239 _NANDCSOUT	=	0xf608
                           00F618   240 _NANDCSDIR	=	0xf618
                           00F900   241 _DMASRCL	=	0xf900
                           00F901   242 _DMASRCM	=	0xf901
                           00F902   243 _DMASRCH	=	0xf902
                           00F904   244 _DMADSTL	=	0xf904
                           00F905   245 _DMADSTM	=	0xf905
                           00F906   246 _DMADSTH	=	0xf906
                           00F908   247 _DMASIZEL	=	0xf908
                           00F909   248 _DMASIZEM	=	0xf909
                           00F90A   249 _DMASIZEH	=	0xf90a
                           00F90C   250 _DMAFILL0	=	0xf90c
                           00F90D   251 _DMAFILL1	=	0xf90d
                           00F90E   252 _DMAFILL2	=	0xf90e
                           00F90F   253 _DMAFILL3	=	0xf90f
                           00F930   254 _DMACMD	=	0xf930
                           00FA14   255 _GPIO0DIR	=	0xfa14
                           00FA15   256 _GPIO0OUT	=	0xfa15
                           00FA38   257 _WARMSTATUS	=	0xfa38
                           00FA40   258 _BANK0PAL	=	0xfa40
                           00FA41   259 _BANK0PAH	=	0xfa41
                           00FA42   260 _BANK1VA	=	0xfa42
                           00FA43   261 _BANK1PAL	=	0xfa43
                           00FA44   262 _BANK1PAH	=	0xfa44
                           00FA45   263 _BANK2VA	=	0xfa45
                           00FA46   264 _BANK2PAL	=	0xfa46
                           00FA47   265 _BANK2PAH	=	0xfa47
                           00FA48   266 _PRAMCTL	=	0xfa48
                                    267 ;--------------------------------------------------------
                                    268 ; absolute external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XABS    (ABS,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; external initialized ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XISEG   (XDATA)
                                    275 	.area HOME    (CODE)
                                    276 	.area GSINIT0 (CODE)
                                    277 	.area GSINIT1 (CODE)
                                    278 	.area GSINIT2 (CODE)
                                    279 	.area GSINIT3 (CODE)
                                    280 	.area GSINIT4 (CODE)
                                    281 	.area GSINIT5 (CODE)
                                    282 	.area GSINIT  (CODE)
                                    283 	.area GSFINAL (CODE)
                                    284 	.area CSEG    (CODE)
                                    285 ;--------------------------------------------------------
                                    286 ; global & static initialisations
                                    287 ;--------------------------------------------------------
                                    288 	.area HOME    (CODE)
                                    289 	.area GSINIT  (CODE)
                                    290 	.area GSFINAL (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 ;--------------------------------------------------------
                                    293 ; Home
                                    294 ;--------------------------------------------------------
                                    295 	.area HOME    (CODE)
                                    296 	.area HOME    (CODE)
                                    297 ;--------------------------------------------------------
                                    298 ; code
                                    299 ;--------------------------------------------------------
                                    300 	.area CSEG    (CODE)
                                    301 ;------------------------------------------------------------
                                    302 ;Allocation info for local variables in function 'EP0ACK'
                                    303 ;------------------------------------------------------------
                                    304 ;	control.c:83: void EP0ACK()
                                    305 ;	-----------------------------------------
                                    306 ;	 function EP0ACK
                                    307 ;	-----------------------------------------
      000000                        308 _EP0ACK:
                           000007   309 	ar7 = 0x07
                           000006   310 	ar6 = 0x06
                           000005   311 	ar5 = 0x05
                           000004   312 	ar4 = 0x04
                           000003   313 	ar3 = 0x03
                           000002   314 	ar2 = 0x02
                           000001   315 	ar1 = 0x01
                           000000   316 	ar0 = 0x00
                                    317 ;	control.c:85: EP0CS = bmEP0ACK;
      000000 90 F0 48         [24]  318 	mov	dptr,#_EP0CS
      000003 74 01            [12]  319 	mov	a,#0x01
      000005 F0               [24]  320 	movx	@dptr,a
                                    321 ;	control.c:86: }
      000006 22               [24]  322 	ret
                                    323 ;------------------------------------------------------------
                                    324 ;Allocation info for local variables in function 'SetAddress'
                                    325 ;------------------------------------------------------------
                                    326 ;ret                       Allocated to registers r7 
                                    327 ;------------------------------------------------------------
                                    328 ;	control.c:88: static BYTE SetAddress()
                                    329 ;	-----------------------------------------
                                    330 ;	 function SetAddress
                                    331 ;	-----------------------------------------
      000007                        332 _SetAddress:
                                    333 ;	control.c:90: BYTE ret = FALSE;
      000007 7F 00            [12]  334 	mov	r7,#0x00
                                    335 ;	control.c:92: if (wValue < 0x7F)
      000009 C3               [12]  336 	clr	c
      00000A E5*00            [12]  337 	mov	a,_wValue
      00000C 94 7F            [12]  338 	subb	a,#0x7f
      00000E E5*01            [12]  339 	mov	a,(_wValue + 1)
      000010 94 00            [12]  340 	subb	a,#0x00
      000012 50 05            [24]  341 	jnc	00102$
                                    342 ;	control.c:94: EP0ACK();
      000014 12r00r00         [24]  343 	lcall	_EP0ACK
                                    344 ;	control.c:95: ret = TRUE;
      000017 7F 01            [12]  345 	mov	r7,#0x01
      000019                        346 00102$:
                                    347 ;	control.c:98: return ret;
      000019 8F 82            [24]  348 	mov	dpl,r7
                                    349 ;	control.c:99: }
      00001B 22               [24]  350 	ret
                                    351 ;------------------------------------------------------------
                                    352 ;Allocation info for local variables in function 'GetDescriptor'
                                    353 ;------------------------------------------------------------
                                    354 ;type                      Allocated to registers r7 
                                    355 ;typeIndex                 Allocated to registers r6 
                                    356 ;i                         Allocated to registers r7 
                                    357 ;total                     Allocated to registers r6 
                                    358 ;ret                       Allocated to registers r5 
                                    359 ;------------------------------------------------------------
                                    360 ;	control.c:101: static BYTE GetDescriptor()
                                    361 ;	-----------------------------------------
                                    362 ;	 function GetDescriptor
                                    363 ;	-----------------------------------------
      00001C                        364 _GetDescriptor:
                                    365 ;	control.c:103: BYTE type = (wValue >> 8) & 0xFF;
      00001C AF*01            [24]  366 	mov	r7,(_wValue + 1)
                                    367 ;	control.c:104: BYTE typeIndex = (wValue & 0xFF) ;
      00001E AE*00            [24]  368 	mov	r6,_wValue
                                    369 ;	control.c:106: BYTE ret = FALSE;
      000020 7D 00            [12]  370 	mov	r5,#0x00
                                    371 ;	control.c:108: switch (type)
      000022 BF 01 02         [24]  372 	cjne	r7,#0x01,00272$
      000025 80 1A            [24]  373 	sjmp	00151$
      000027                        374 00272$:
      000027 BF 02 02         [24]  375 	cjne	r7,#0x02,00273$
      00002A 80 46            [24]  376 	sjmp	00103$
      00002C                        377 00273$:
      00002C BF 03 03         [24]  378 	cjne	r7,#0x03,00274$
      00002F 02r00rA9         [24]  379 	ljmp	00105$
      000032                        380 00274$:
      000032 BF 06 03         [24]  381 	cjne	r7,#0x06,00275$
      000035 02r01r19         [24]  382 	ljmp	00164$
      000038                        383 00275$:
      000038 BF 22 03         [24]  384 	cjne	r7,#0x22,00276$
      00003B 02r01r49         [24]  385 	ljmp	00167$
      00003E                        386 00276$:
      00003E 02r01r77         [24]  387 	ljmp	00116$
                                    388 ;	control.c:112: for (i = 0; i < 0x12; i++)
      000041                        389 00151$:
      000041 7F 00            [12]  390 	mov	r7,#0x00
      000043                        391 00117$:
                                    392 ;	control.c:114: EP0.fifo = deviceDescriptor[i];
      000043 EF               [12]  393 	mov	a,r7
      000044 90r00r00         [24]  394 	mov	dptr,#_deviceDescriptor
      000047 93               [24]  395 	movc	a,@a+dptr
      000048 90 F1 DC         [24]  396 	mov	dptr,#(_EP0 + 0x001c)
      00004B F0               [24]  397 	movx	@dptr,a
                                    398 ;	control.c:112: for (i = 0; i < 0x12; i++)
      00004C 0F               [12]  399 	inc	r7
      00004D BF 12 00         [24]  400 	cjne	r7,#0x12,00277$
      000050                        401 00277$:
                                    402 ;	control.c:117: SendControlResponse(wLength < 0x12 ? wLength : 0x12);
      000050 40 F1            [24]  403 	jc	00117$
      000052 E5*00            [12]  404 	mov	a,_wLength
      000054 94 12            [12]  405 	subb	a,#0x12
      000056 E5*01            [12]  406 	mov	a,(_wLength + 1)
      000058 94 00            [12]  407 	subb	a,#0x00
      00005A 50 06            [24]  408 	jnc	00134$
      00005C AC*00            [24]  409 	mov	r4,_wLength
      00005E AF*01            [24]  410 	mov	r7,(_wLength + 1)
      000060 80 04            [24]  411 	sjmp	00135$
      000062                        412 00134$:
      000062 7C 12            [12]  413 	mov	r4,#0x12
      000064 7F 00            [12]  414 	mov	r7,#0x00
      000066                        415 00135$:
      000066 8C 82            [24]  416 	mov	dpl,r4
      000068 8F 83            [24]  417 	mov	dph,r7
      00006A 12r00r00         [24]  418 	lcall	_SendControlResponse
                                    419 ;	control.c:118: ret = TRUE;
      00006D 7D 01            [12]  420 	mov	r5,#0x01
                                    421 ;	control.c:120: break;
      00006F 02r01r77         [24]  422 	ljmp	00116$
                                    423 ;	control.c:122: case 0x02:
      000072                        424 00103$:
                                    425 ;	control.c:124: total = wLength < sizeof(configDescriptor) ? wLength : sizeof(configDescriptor);
      000072 C3               [12]  426 	clr	c
      000073 E5*00            [12]  427 	mov	a,_wLength
      000075 94 37            [12]  428 	subb	a,#0x37
      000077 E5*01            [12]  429 	mov	a,(_wLength + 1)
      000079 94 00            [12]  430 	subb	a,#0x00
      00007B 50 06            [24]  431 	jnc	00136$
      00007D AC*00            [24]  432 	mov	r4,_wLength
      00007F AF*01            [24]  433 	mov	r7,(_wLength + 1)
      000081 80 04            [24]  434 	sjmp	00137$
      000083                        435 00136$:
      000083 7C 37            [12]  436 	mov	r4,#0x37
      000085 7F 00            [12]  437 	mov	r7,#0x00
      000087                        438 00137$:
                                    439 ;	control.c:125: for (i = 0; i < total; i++)
      000087 7F 00            [12]  440 	mov	r7,#0x00
      000089                        441 00120$:
      000089 C3               [12]  442 	clr	c
      00008A EF               [12]  443 	mov	a,r7
      00008B 9C               [12]  444 	subb	a,r4
      00008C 50 0D            [24]  445 	jnc	00104$
                                    446 ;	control.c:127: EP0.fifo = configDescriptor[i];
      00008E EF               [12]  447 	mov	a,r7
      00008F 90r00r12         [24]  448 	mov	dptr,#_configDescriptor
      000092 93               [24]  449 	movc	a,@a+dptr
      000093 FB               [12]  450 	mov	r3,a
      000094 90 F1 DC         [24]  451 	mov	dptr,#(_EP0 + 0x001c)
      000097 F0               [24]  452 	movx	@dptr,a
                                    453 ;	control.c:125: for (i = 0; i < total; i++)
      000098 0F               [12]  454 	inc	r7
      000099 80 EE            [24]  455 	sjmp	00120$
      00009B                        456 00104$:
                                    457 ;	control.c:130: SendControlResponse(total);
      00009B 7F 00            [12]  458 	mov	r7,#0x00
      00009D 8C 82            [24]  459 	mov	dpl,r4
      00009F 8F 83            [24]  460 	mov	dph,r7
      0000A1 12r00r00         [24]  461 	lcall	_SendControlResponse
                                    462 ;	control.c:131: ret = TRUE;
      0000A4 7D 01            [12]  463 	mov	r5,#0x01
                                    464 ;	control.c:133: break;
      0000A6 02r01r77         [24]  465 	ljmp	00116$
                                    466 ;	control.c:135: case 0x03://string descriptor
      0000A9                        467 00105$:
                                    468 ;	control.c:137: switch (typeIndex){
      0000A9 BE 00 37         [24]  469 	cjne	r6,#0x00,00108$
                                    470 ;	control.c:139: total = wLength < sizeof(stringLanDescriptor) ? wLength : sizeof(stringLanDescriptor);
      0000AC C3               [12]  471 	clr	c
      0000AD E5*00            [12]  472 	mov	a,_wLength
      0000AF 94 04            [12]  473 	subb	a,#0x04
      0000B1 E5*01            [12]  474 	mov	a,(_wLength + 1)
      0000B3 94 00            [12]  475 	subb	a,#0x00
      0000B5 50 06            [24]  476 	jnc	00138$
      0000B7 AE*00            [24]  477 	mov	r6,_wLength
      0000B9 AF*01            [24]  478 	mov	r7,(_wLength + 1)
      0000BB 80 04            [24]  479 	sjmp	00139$
      0000BD                        480 00138$:
      0000BD 7E 04            [12]  481 	mov	r6,#0x04
      0000BF 7F 00            [12]  482 	mov	r7,#0x00
      0000C1                        483 00139$:
                                    484 ;	control.c:140: for (i = 0; i < total; i++)
      0000C1 7F 00            [12]  485 	mov	r7,#0x00
      0000C3                        486 00123$:
      0000C3 C3               [12]  487 	clr	c
      0000C4 EF               [12]  488 	mov	a,r7
      0000C5 9E               [12]  489 	subb	a,r6
      0000C6 50 0D            [24]  490 	jnc	00107$
                                    491 ;	control.c:142: EP0.fifo = stringLanDescriptor[i];
      0000C8 EF               [12]  492 	mov	a,r7
      0000C9 90r00r88         [24]  493 	mov	dptr,#_stringLanDescriptor
      0000CC 93               [24]  494 	movc	a,@a+dptr
      0000CD FC               [12]  495 	mov	r4,a
      0000CE 90 F1 DC         [24]  496 	mov	dptr,#(_EP0 + 0x001c)
      0000D1 F0               [24]  497 	movx	@dptr,a
                                    498 ;	control.c:140: for (i = 0; i < total; i++)
      0000D2 0F               [12]  499 	inc	r7
      0000D3 80 EE            [24]  500 	sjmp	00123$
      0000D5                        501 00107$:
                                    502 ;	control.c:144: SendControlResponse(total);
      0000D5 7F 00            [12]  503 	mov	r7,#0x00
      0000D7 8E 82            [24]  504 	mov	dpl,r6
      0000D9 8F 83            [24]  505 	mov	dph,r7
      0000DB 12r00r00         [24]  506 	lcall	_SendControlResponse
                                    507 ;	control.c:145: ret = TRUE;					
      0000DE 7D 01            [12]  508 	mov	r5,#0x01
                                    509 ;	control.c:146: break;
      0000E0 02r01r77         [24]  510 	ljmp	00116$
                                    511 ;	control.c:148: default:{
      0000E3                        512 00108$:
                                    513 ;	control.c:149: total = wLength < sizeof(stringDescriptor) ? wLength : sizeof(stringDescriptor);
      0000E3 C3               [12]  514 	clr	c
      0000E4 E5*00            [12]  515 	mov	a,_wLength
      0000E6 94 16            [12]  516 	subb	a,#0x16
      0000E8 E5*01            [12]  517 	mov	a,(_wLength + 1)
      0000EA 94 00            [12]  518 	subb	a,#0x00
      0000EC 50 06            [24]  519 	jnc	00140$
      0000EE AE*00            [24]  520 	mov	r6,_wLength
      0000F0 AF*01            [24]  521 	mov	r7,(_wLength + 1)
      0000F2 80 04            [24]  522 	sjmp	00141$
      0000F4                        523 00140$:
      0000F4 7E 16            [12]  524 	mov	r6,#0x16
      0000F6 7F 00            [12]  525 	mov	r7,#0x00
      0000F8                        526 00141$:
                                    527 ;	control.c:150: for (i = 0; i < total; i++)
      0000F8 7F 00            [12]  528 	mov	r7,#0x00
      0000FA                        529 00126$:
      0000FA C3               [12]  530 	clr	c
      0000FB EF               [12]  531 	mov	a,r7
      0000FC 9E               [12]  532 	subb	a,r6
      0000FD 50 0D            [24]  533 	jnc	00109$
                                    534 ;	control.c:152: EP0.fifo = stringDescriptor[i];
      0000FF EF               [12]  535 	mov	a,r7
      000100 90r00r8C         [24]  536 	mov	dptr,#_stringDescriptor
      000103 93               [24]  537 	movc	a,@a+dptr
      000104 FC               [12]  538 	mov	r4,a
      000105 90 F1 DC         [24]  539 	mov	dptr,#(_EP0 + 0x001c)
      000108 F0               [24]  540 	movx	@dptr,a
                                    541 ;	control.c:150: for (i = 0; i < total; i++)
      000109 0F               [12]  542 	inc	r7
      00010A 80 EE            [24]  543 	sjmp	00126$
      00010C                        544 00109$:
                                    545 ;	control.c:154: SendControlResponse(total);
      00010C 7F 00            [12]  546 	mov	r7,#0x00
      00010E 8E 82            [24]  547 	mov	dpl,r6
      000110 8F 83            [24]  548 	mov	dph,r7
      000112 12r00r00         [24]  549 	lcall	_SendControlResponse
                                    550 ;	control.c:155: ret = TRUE;					
      000115 7D 01            [12]  551 	mov	r5,#0x01
                                    552 ;	control.c:160: break;
                                    553 ;	control.c:164: for (i = 0; i < sizeof(deviceQualifierDescriptor); i++)
      000117 80 5E            [24]  554 	sjmp	00116$
      000119                        555 00164$:
      000119 7F 00            [12]  556 	mov	r7,#0x00
      00011B                        557 00128$:
                                    558 ;	control.c:166: EP0.fifo = deviceQualifierDescriptor[i];
      00011B EF               [12]  559 	mov	a,r7
      00011C 90r00rD6         [24]  560 	mov	dptr,#_deviceQualifierDescriptor
      00011F 93               [24]  561 	movc	a,@a+dptr
      000120 90 F1 DC         [24]  562 	mov	dptr,#(_EP0 + 0x001c)
      000123 F0               [24]  563 	movx	@dptr,a
                                    564 ;	control.c:164: for (i = 0; i < sizeof(deviceQualifierDescriptor); i++)
      000124 0F               [12]  565 	inc	r7
      000125 BF 0A 00         [24]  566 	cjne	r7,#0x0a,00288$
      000128                        567 00288$:
                                    568 ;	control.c:169: SendControlResponse(wLength < sizeof(deviceQualifierDescriptor) ? wLength : sizeof(deviceQualifierDescriptor));
      000128 40 F1            [24]  569 	jc	00128$
      00012A E5*00            [12]  570 	mov	a,_wLength
      00012C 94 0A            [12]  571 	subb	a,#0x0a
      00012E E5*01            [12]  572 	mov	a,(_wLength + 1)
      000130 94 00            [12]  573 	subb	a,#0x00
      000132 50 06            [24]  574 	jnc	00142$
      000134 AE*00            [24]  575 	mov	r6,_wLength
      000136 AF*01            [24]  576 	mov	r7,(_wLength + 1)
      000138 80 04            [24]  577 	sjmp	00143$
      00013A                        578 00142$:
      00013A 7E 0A            [12]  579 	mov	r6,#0x0a
      00013C 7F 00            [12]  580 	mov	r7,#0x00
      00013E                        581 00143$:
      00013E 8E 82            [24]  582 	mov	dpl,r6
      000140 8F 83            [24]  583 	mov	dph,r7
      000142 12r00r00         [24]  584 	lcall	_SendControlResponse
                                    585 ;	control.c:170: ret = TRUE;
      000145 7D 01            [12]  586 	mov	r5,#0x01
                                    587 ;	control.c:172: break;
                                    588 ;	control.c:176: for (i = 0; i < sizeof(HIDreportDescriptor); i++)
      000147 80 2E            [24]  589 	sjmp	00116$
      000149                        590 00167$:
      000149 7F 00            [12]  591 	mov	r7,#0x00
      00014B                        592 00130$:
                                    593 ;	control.c:178: EP0.fifo = HIDreportDescriptor[i];
      00014B EF               [12]  594 	mov	a,r7
      00014C 90r00r49         [24]  595 	mov	dptr,#_HIDreportDescriptor
      00014F 93               [24]  596 	movc	a,@a+dptr
      000150 90 F1 DC         [24]  597 	mov	dptr,#(_EP0 + 0x001c)
      000153 F0               [24]  598 	movx	@dptr,a
                                    599 ;	control.c:176: for (i = 0; i < sizeof(HIDreportDescriptor); i++)
      000154 0F               [12]  600 	inc	r7
      000155 BF 3F 00         [24]  601 	cjne	r7,#0x3f,00291$
      000158                        602 00291$:
                                    603 ;	control.c:181: SendControlResponse(wLength < sizeof(HIDreportDescriptor) ? wLength : sizeof(HIDreportDescriptor));
      000158 40 F1            [24]  604 	jc	00130$
      00015A E5*00            [12]  605 	mov	a,_wLength
      00015C 94 3F            [12]  606 	subb	a,#0x3f
      00015E E5*01            [12]  607 	mov	a,(_wLength + 1)
      000160 94 00            [12]  608 	subb	a,#0x00
      000162 50 06            [24]  609 	jnc	00144$
      000164 AE*00            [24]  610 	mov	r6,_wLength
      000166 AF*01            [24]  611 	mov	r7,(_wLength + 1)
      000168 80 04            [24]  612 	sjmp	00145$
      00016A                        613 00144$:
      00016A 7E 3F            [12]  614 	mov	r6,#0x3f
      00016C 7F 00            [12]  615 	mov	r7,#0x00
      00016E                        616 00145$:
      00016E 8E 82            [24]  617 	mov	dpl,r6
      000170 8F 83            [24]  618 	mov	dph,r7
      000172 12r00r00         [24]  619 	lcall	_SendControlResponse
                                    620 ;	control.c:182: ret = TRUE;
      000175 7D 01            [12]  621 	mov	r5,#0x01
                                    622 ;	control.c:190: }
      000177                        623 00116$:
                                    624 ;	control.c:192: return ret;
      000177 8D 82            [24]  625 	mov	dpl,r5
                                    626 ;	control.c:193: }
      000179 22               [24]  627 	ret
                                    628 ;------------------------------------------------------------
                                    629 ;Allocation info for local variables in function 'SetConfiguration'
                                    630 ;------------------------------------------------------------
                                    631 ;ret                       Allocated to registers r7 
                                    632 ;------------------------------------------------------------
                                    633 ;	control.c:195: static BYTE SetConfiguration()
                                    634 ;	-----------------------------------------
                                    635 ;	 function SetConfiguration
                                    636 ;	-----------------------------------------
      00017A                        637 _SetConfiguration:
                                    638 ;	control.c:197: BYTE ret = FALSE;
      00017A 7F 00            [12]  639 	mov	r7,#0x00
                                    640 ;	control.c:199: if (wValue <= 1)
      00017C C3               [12]  641 	clr	c
      00017D 74 01            [12]  642 	mov	a,#0x01
      00017F 95*00            [12]  643 	subb	a,_wValue
      000181 E4               [12]  644 	clr	a
      000182 95*01            [12]  645 	subb	a,(_wValue + 1)
      000184 40 05            [24]  646 	jc	00102$
                                    647 ;	control.c:201: EP0ACK();
      000186 12r00r00         [24]  648 	lcall	_EP0ACK
                                    649 ;	control.c:202: ret = TRUE;
      000189 7F 01            [12]  650 	mov	r7,#0x01
      00018B                        651 00102$:
                                    652 ;	control.c:205: return ret;
      00018B 8F 82            [24]  653 	mov	dpl,r7
                                    654 ;	control.c:206: }
      00018D 22               [24]  655 	ret
                                    656 ;------------------------------------------------------------
                                    657 ;Allocation info for local variables in function 'HandleStandardRequest'
                                    658 ;------------------------------------------------------------
                                    659 ;	control.c:208: BYTE HandleStandardRequest()
                                    660 ;	-----------------------------------------
                                    661 ;	 function HandleStandardRequest
                                    662 ;	-----------------------------------------
      00018E                        663 _HandleStandardRequest:
                                    664 ;	control.c:210: switch(bRequest)
      00018E 74 05            [12]  665 	mov	a,#0x05
      000190 B5*00 02         [24]  666 	cjne	a,_bRequest,00120$
      000193 80 0E            [24]  667 	sjmp	00101$
      000195                        668 00120$:
      000195 74 06            [12]  669 	mov	a,#0x06
      000197 B5*00 02         [24]  670 	cjne	a,_bRequest,00121$
      00019A 80 0A            [24]  671 	sjmp	00102$
      00019C                        672 00121$:
      00019C 74 09            [12]  673 	mov	a,#0x09
                                    674 ;	control.c:212: case 0x05:
      00019E B5*00 0B         [24]  675 	cjne	a,_bRequest,00104$
      0001A1 80 06            [24]  676 	sjmp	00103$
      0001A3                        677 00101$:
                                    678 ;	control.c:214: return SetAddress();
                                    679 ;	control.c:216: case 0x06:
      0001A3 02r00r07         [24]  680 	ljmp	_SetAddress
      0001A6                        681 00102$:
                                    682 ;	control.c:218: return GetDescriptor();
                                    683 ;	control.c:220: case 0x09:
      0001A6 02r00r1C         [24]  684 	ljmp	_GetDescriptor
      0001A9                        685 00103$:
                                    686 ;	control.c:222: return SetConfiguration();
                                    687 ;	control.c:224: default:
      0001A9 02r01r7A         [24]  688 	ljmp	_SetConfiguration
      0001AC                        689 00104$:
                                    690 ;	control.c:226: return FALSE;
      0001AC 75 82 00         [24]  691 	mov	dpl,#0x00
                                    692 ;	control.c:228: }
                                    693 ;	control.c:229: }
      0001AF 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'GetMaxLUN'
                                    697 ;------------------------------------------------------------
                                    698 ;	control.c:231: static BYTE GetMaxLUN()
                                    699 ;	-----------------------------------------
                                    700 ;	 function GetMaxLUN
                                    701 ;	-----------------------------------------
      0001B0                        702 _GetMaxLUN:
                                    703 ;	control.c:233: EP0.fifo = 0x00;
      0001B0 90 F1 DC         [24]  704 	mov	dptr,#(_EP0 + 0x001c)
      0001B3 E4               [12]  705 	clr	a
      0001B4 F0               [24]  706 	movx	@dptr,a
                                    707 ;	control.c:234: SendControlResponse(wLength < 0x01 ? wLength : 0x01);
      0001B5 C3               [12]  708 	clr	c
      0001B6 E5*00            [12]  709 	mov	a,_wLength
      0001B8 94 01            [12]  710 	subb	a,#0x01
      0001BA E5*01            [12]  711 	mov	a,(_wLength + 1)
      0001BC 94 00            [12]  712 	subb	a,#0x00
      0001BE 50 06            [24]  713 	jnc	00103$
      0001C0 AE*00            [24]  714 	mov	r6,_wLength
      0001C2 AF*01            [24]  715 	mov	r7,(_wLength + 1)
      0001C4 80 04            [24]  716 	sjmp	00104$
      0001C6                        717 00103$:
      0001C6 7E 01            [12]  718 	mov	r6,#0x01
      0001C8 7F 00            [12]  719 	mov	r7,#0x00
      0001CA                        720 00104$:
      0001CA 8E 82            [24]  721 	mov	dpl,r6
      0001CC 8F 83            [24]  722 	mov	dph,r7
      0001CE 12r00r00         [24]  723 	lcall	_SendControlResponse
                                    724 ;	control.c:236: return TRUE;
      0001D1 75 82 01         [24]  725 	mov	dpl,#0x01
                                    726 ;	control.c:237: }
      0001D4 22               [24]  727 	ret
                                    728 ;------------------------------------------------------------
                                    729 ;Allocation info for local variables in function 'HandleClassRequest'
                                    730 ;------------------------------------------------------------
                                    731 ;	control.c:239: BYTE HandleClassRequest()
                                    732 ;	-----------------------------------------
                                    733 ;	 function HandleClassRequest
                                    734 ;	-----------------------------------------
      0001D5                        735 _HandleClassRequest:
                                    736 ;	control.c:241: switch(bRequest)
      0001D5 74 09            [12]  737 	mov	a,#0x09
      0001D7 B5*00 02         [24]  738 	cjne	a,_bRequest,00120$
      0001DA 80 0E            [24]  739 	sjmp	00101$
      0001DC                        740 00120$:
      0001DC 74 0A            [12]  741 	mov	a,#0x0a
      0001DE B5*00 02         [24]  742 	cjne	a,_bRequest,00121$
      0001E1 80 11            [24]  743 	sjmp	00102$
      0001E3                        744 00121$:
      0001E3 74 FE            [12]  745 	mov	a,#0xfe
                                    746 ;	control.c:243: case 0x09:
      0001E5 B5*00 16         [24]  747 	cjne	a,_bRequest,00104$
      0001E8 80 11            [24]  748 	sjmp	00103$
      0001EA                        749 00101$:
                                    750 ;	control.c:245: EP0CS = 0x05;
      0001EA 90 F0 48         [24]  751 	mov	dptr,#_EP0CS
      0001ED 74 05            [12]  752 	mov	a,#0x05
      0001EF F0               [24]  753 	movx	@dptr,a
                                    754 ;	control.c:246: return TRUE;
      0001F0 75 82 01         [24]  755 	mov	dpl,#0x01
                                    756 ;	control.c:248: case 0x0A:
      0001F3 22               [24]  757 	ret
      0001F4                        758 00102$:
                                    759 ;	control.c:250: EP0ACK();
      0001F4 12r00r00         [24]  760 	lcall	_EP0ACK
                                    761 ;	control.c:251: return TRUE;
      0001F7 75 82 01         [24]  762 	mov	dpl,#0x01
                                    763 ;	control.c:253: case 0xFE:
      0001FA 22               [24]  764 	ret
      0001FB                        765 00103$:
                                    766 ;	control.c:255: return GetMaxLUN();
                                    767 ;	control.c:257: default:
      0001FB 02r01rB0         [24]  768 	ljmp	_GetMaxLUN
      0001FE                        769 00104$:
                                    770 ;	control.c:259: return FALSE;
      0001FE 75 82 00         [24]  771 	mov	dpl,#0x00
                                    772 ;	control.c:261: }
                                    773 ;	control.c:262: }
      000201 22               [24]  774 	ret
                                    775 ;------------------------------------------------------------
                                    776 ;Allocation info for local variables in function 'HandleVendorRequest'
                                    777 ;------------------------------------------------------------
                                    778 ;	control.c:264: BYTE HandleVendorRequest()
                                    779 ;	-----------------------------------------
                                    780 ;	 function HandleVendorRequest
                                    781 ;	-----------------------------------------
      000202                        782 _HandleVendorRequest:
                                    783 ;	control.c:266: return FALSE;
      000202 75 82 00         [24]  784 	mov	dpl,#0x00
                                    785 ;	control.c:267: }
      000205 22               [24]  786 	ret
                                    787 	.area CSEG    (CODE)
                                    788 	.area CONST   (CODE)
      000000                        789 _deviceDescriptor:
      000000 12                     790 	.db #0x12	; 18
      000001 01                     791 	.db #0x01	; 1
      000002 00                     792 	.db #0x00	; 0
      000003 02                     793 	.db #0x02	; 2
      000004 03                     794 	.db #0x03	; 3
      000005 01                     795 	.db #0x01	; 1
      000006 00                     796 	.db #0x00	; 0
      000007 40                     797 	.db #0x40	; 64
      000008 B4                     798 	.db #0xb4	; 180
      000009 04                     799 	.db #0x04	; 4
      00000A 05                     800 	.db #0x05	; 5
      00000B 69                     801 	.db #0x69	; 105	'i'
      00000C 00                     802 	.db #0x00	; 0
      00000D 00                     803 	.db #0x00	; 0
      00000E 01                     804 	.db #0x01	; 1
      00000F 02                     805 	.db #0x02	; 2
      000010 03                     806 	.db #0x03	; 3
      000011 01                     807 	.db #0x01	; 1
      000012                        808 _configDescriptor:
      000012 09                     809 	.db #0x09	; 9
      000013 02                     810 	.db #0x02	; 2
      000014 37                     811 	.db #0x37	; 55	'7'
      000015 00                     812 	.db #0x00	; 0
      000016 01                     813 	.db #0x01	; 1
      000017 01                     814 	.db #0x01	; 1
      000018 00                     815 	.db #0x00	; 0
      000019 80                     816 	.db #0x80	; 128
      00001A 4B                     817 	.db #0x4b	; 75	'K'
      00001B 09                     818 	.db #0x09	; 9
      00001C 04                     819 	.db #0x04	; 4
      00001D 00                     820 	.db #0x00	; 0
      00001E 00                     821 	.db #0x00	; 0
      00001F 04                     822 	.db #0x04	; 4
      000020 03                     823 	.db #0x03	; 3
      000021 01                     824 	.db #0x01	; 1
      000022 01                     825 	.db #0x01	; 1
      000023 00                     826 	.db #0x00	; 0
      000024 09                     827 	.db #0x09	; 9
      000025 21                     828 	.db #0x21	; 33
      000026 01                     829 	.db #0x01	; 1
      000027 01                     830 	.db #0x01	; 1
      000028 00                     831 	.db #0x00	; 0
      000029 01                     832 	.db #0x01	; 1
      00002A 22                     833 	.db #0x22	; 34
      00002B 3F                     834 	.db #0x3f	; 63
      00002C 00                     835 	.db #0x00	; 0
      00002D 07                     836 	.db #0x07	; 7
      00002E 05                     837 	.db #0x05	; 5
      00002F 81                     838 	.db #0x81	; 129
      000030 00                     839 	.db #0x00	; 0
      000031 08                     840 	.db #0x08	; 8
      000032 00                     841 	.db #0x00	; 0
      000033 00                     842 	.db #0x00	; 0
      000034 07                     843 	.db #0x07	; 7
      000035 05                     844 	.db #0x05	; 5
      000036 02                     845 	.db #0x02	; 2
      000037 00                     846 	.db #0x00	; 0
      000038 08                     847 	.db #0x08	; 8
      000039 00                     848 	.db #0x00	; 0
      00003A 00                     849 	.db #0x00	; 0
      00003B 07                     850 	.db #0x07	; 7
      00003C 05                     851 	.db #0x05	; 5
      00003D 83                     852 	.db #0x83	; 131
      00003E 03                     853 	.db #0x03	; 3
      00003F 08                     854 	.db #0x08	; 8
      000040 00                     855 	.db #0x00	; 0
      000041 00                     856 	.db #0x00	; 0
      000042 07                     857 	.db #0x07	; 7
      000043 05                     858 	.db #0x05	; 5
      000044 04                     859 	.db #0x04	; 4
      000045 03                     860 	.db #0x03	; 3
      000046 08                     861 	.db #0x08	; 8
      000047 00                     862 	.db #0x00	; 0
      000048 01                     863 	.db #0x01	; 1
      000049                        864 _HIDreportDescriptor:
      000049 05                     865 	.db #0x05	; 5
      00004A 01                     866 	.db #0x01	; 1
      00004B 09                     867 	.db #0x09	; 9
      00004C 06                     868 	.db #0x06	; 6
      00004D A1                     869 	.db #0xa1	; 161
      00004E 01                     870 	.db #0x01	; 1
      00004F 05                     871 	.db #0x05	; 5
      000050 07                     872 	.db #0x07	; 7
      000051 19                     873 	.db #0x19	; 25
      000052 E0                     874 	.db #0xe0	; 224
      000053 29                     875 	.db #0x29	; 41
      000054 E7                     876 	.db #0xe7	; 231
      000055 15                     877 	.db #0x15	; 21
      000056 00                     878 	.db #0x00	; 0
      000057 25                     879 	.db #0x25	; 37
      000058 01                     880 	.db #0x01	; 1
      000059 75                     881 	.db #0x75	; 117	'u'
      00005A 01                     882 	.db #0x01	; 1
      00005B 95                     883 	.db #0x95	; 149
      00005C 08                     884 	.db #0x08	; 8
      00005D 81                     885 	.db #0x81	; 129
      00005E 02                     886 	.db #0x02	; 2
      00005F 95                     887 	.db #0x95	; 149
      000060 01                     888 	.db #0x01	; 1
      000061 75                     889 	.db #0x75	; 117	'u'
      000062 08                     890 	.db #0x08	; 8
      000063 81                     891 	.db #0x81	; 129
      000064 01                     892 	.db #0x01	; 1
      000065 95                     893 	.db #0x95	; 149
      000066 05                     894 	.db #0x05	; 5
      000067 75                     895 	.db #0x75	; 117	'u'
      000068 01                     896 	.db #0x01	; 1
      000069 05                     897 	.db #0x05	; 5
      00006A 08                     898 	.db #0x08	; 8
      00006B 19                     899 	.db #0x19	; 25
      00006C 01                     900 	.db #0x01	; 1
      00006D 29                     901 	.db #0x29	; 41
      00006E 05                     902 	.db #0x05	; 5
      00006F 91                     903 	.db #0x91	; 145
      000070 02                     904 	.db #0x02	; 2
      000071 95                     905 	.db #0x95	; 149
      000072 01                     906 	.db #0x01	; 1
      000073 75                     907 	.db #0x75	; 117	'u'
      000074 03                     908 	.db #0x03	; 3
      000075 91                     909 	.db #0x91	; 145
      000076 01                     910 	.db #0x01	; 1
      000077 95                     911 	.db #0x95	; 149
      000078 06                     912 	.db #0x06	; 6
      000079 75                     913 	.db #0x75	; 117	'u'
      00007A 08                     914 	.db #0x08	; 8
      00007B 15                     915 	.db #0x15	; 21
      00007C 00                     916 	.db #0x00	; 0
      00007D 25                     917 	.db #0x25	; 37
      00007E 65                     918 	.db #0x65	; 101	'e'
      00007F 05                     919 	.db #0x05	; 5
      000080 07                     920 	.db #0x07	; 7
      000081 19                     921 	.db #0x19	; 25
      000082 00                     922 	.db #0x00	; 0
      000083 29                     923 	.db #0x29	; 41
      000084 65                     924 	.db #0x65	; 101	'e'
      000085 81                     925 	.db #0x81	; 129
      000086 00                     926 	.db #0x00	; 0
      000087 C0                     927 	.db #0xc0	; 192
      000088                        928 _stringLanDescriptor:
      000088 04                     929 	.db #0x04	; 4
      000089 03                     930 	.db #0x03	; 3
      00008A 09                     931 	.db #0x09	; 9
      00008B 04                     932 	.db #0x04	; 4
      00008C                        933 _stringDescriptor:
      00008C 16                     934 	.db #0x16	; 22
      00008D 03                     935 	.db #0x03	; 3
      00008E 56                     936 	.db #0x56	; 86	'V'
      00008F 00                     937 	.db #0x00	; 0
      000090 69                     938 	.db #0x69	; 105	'i'
      000091 00                     939 	.db #0x00	; 0
      000092 72                     940 	.db #0x72	; 114	'r'
      000093 00                     941 	.db #0x00	; 0
      000094 74                     942 	.db #0x74	; 116	't'
      000095 00                     943 	.db #0x00	; 0
      000096 75                     944 	.db #0x75	; 117	'u'
      000097 00                     945 	.db #0x00	; 0
      000098 61                     946 	.db #0x61	; 97	'a'
      000099 00                     947 	.db #0x00	; 0
      00009A 6C                     948 	.db #0x6c	; 108	'l'
      00009B 00                     949 	.db #0x00	; 0
      00009C 42                     950 	.db #0x42	; 66	'B'
      00009D 00                     951 	.db #0x00	; 0
      00009E 6F                     952 	.db #0x6f	; 111	'o'
      00009F 00                     953 	.db #0x00	; 0
      0000A0 78                     954 	.db #0x78	; 120	'x'
      0000A1 00                     955 	.db #0x00	; 0
      0000A2                        956 _HIDreportDescriptorMouse:
      0000A2 05                     957 	.db #0x05	; 5
      0000A3 01                     958 	.db #0x01	; 1
      0000A4 09                     959 	.db #0x09	; 9
      0000A5 02                     960 	.db #0x02	; 2
      0000A6 A1                     961 	.db #0xa1	; 161
      0000A7 01                     962 	.db #0x01	; 1
      0000A8 09                     963 	.db #0x09	; 9
      0000A9 01                     964 	.db #0x01	; 1
      0000AA A1                     965 	.db #0xa1	; 161
      0000AB 00                     966 	.db #0x00	; 0
      0000AC 05                     967 	.db #0x05	; 5
      0000AD 09                     968 	.db #0x09	; 9
      0000AE 19                     969 	.db #0x19	; 25
      0000AF 01                     970 	.db #0x01	; 1
      0000B0 29                     971 	.db #0x29	; 41
      0000B1 03                     972 	.db #0x03	; 3
      0000B2 15                     973 	.db #0x15	; 21
      0000B3 00                     974 	.db #0x00	; 0
      0000B4 25                     975 	.db #0x25	; 37
      0000B5 01                     976 	.db #0x01	; 1
      0000B6 95                     977 	.db #0x95	; 149
      0000B7 03                     978 	.db #0x03	; 3
      0000B8 75                     979 	.db #0x75	; 117	'u'
      0000B9 01                     980 	.db #0x01	; 1
      0000BA 81                     981 	.db #0x81	; 129
      0000BB 02                     982 	.db #0x02	; 2
      0000BC 95                     983 	.db #0x95	; 149
      0000BD 01                     984 	.db #0x01	; 1
      0000BE 75                     985 	.db #0x75	; 117	'u'
      0000BF 05                     986 	.db #0x05	; 5
      0000C0 81                     987 	.db #0x81	; 129
      0000C1 03                     988 	.db #0x03	; 3
      0000C2 05                     989 	.db #0x05	; 5
      0000C3 01                     990 	.db #0x01	; 1
      0000C4 09                     991 	.db #0x09	; 9
      0000C5 30                     992 	.db #0x30	; 48	'0'
      0000C6 09                     993 	.db #0x09	; 9
      0000C7 31                     994 	.db #0x31	; 49	'1'
      0000C8 09                     995 	.db #0x09	; 9
      0000C9 38                     996 	.db #0x38	; 56	'8'
      0000CA 15                     997 	.db #0x15	; 21
      0000CB 81                     998 	.db #0x81	; 129
      0000CC 25                     999 	.db #0x25	; 37
      0000CD 7F                    1000 	.db #0x7f	; 127
      0000CE 75                    1001 	.db #0x75	; 117	'u'
      0000CF 08                    1002 	.db #0x08	; 8
      0000D0 95                    1003 	.db #0x95	; 149
      0000D1 03                    1004 	.db #0x03	; 3
      0000D2 81                    1005 	.db #0x81	; 129
      0000D3 06                    1006 	.db #0x06	; 6
      0000D4 C0                    1007 	.db #0xc0	; 192
      0000D5 C0                    1008 	.db #0xc0	; 192
      0000D6                       1009 _deviceQualifierDescriptor:
      0000D6 0A                    1010 	.db #0x0a	; 10
      0000D7 06                    1011 	.db #0x06	; 6
      0000D8 00                    1012 	.db #0x00	; 0
      0000D9 02                    1013 	.db #0x02	; 2
      0000DA 00                    1014 	.db #0x00	; 0
      0000DB 00                    1015 	.db #0x00	; 0
      0000DC 00                    1016 	.db #0x00	; 0
      0000DD 40                    1017 	.db #0x40	; 64
      0000DE 01                    1018 	.db #0x01	; 1
      0000DF 00                    1019 	.db #0x00	; 0
                                   1020 	.area XINIT   (CODE)
                                   1021 	.area CABS    (ABS,CODE)
