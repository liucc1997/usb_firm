                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module control
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _HandleVendorRequest
                                     12 	.globl _HandleClassRequest
                                     13 	.globl _HandleStandardRequest
                                     14 	.globl _EP0ACK
                                     15 	.globl _SendControlResponse
                                     16 	.globl _RI
                                     17 	.globl _TI
                                     18 	.globl _RB8
                                     19 	.globl _TB8
                                     20 	.globl _REN
                                     21 	.globl _SM2
                                     22 	.globl _SM1
                                     23 	.globl _SM0
                                     24 	.globl _RXD
                                     25 	.globl _TXD
                                     26 	.globl _INT0
                                     27 	.globl _INT1
                                     28 	.globl _T0
                                     29 	.globl _T1
                                     30 	.globl _WR
                                     31 	.globl _RD
                                     32 	.globl _PX0
                                     33 	.globl _PT0
                                     34 	.globl _PX1
                                     35 	.globl _PT1
                                     36 	.globl _PS
                                     37 	.globl _EX0
                                     38 	.globl _ET0
                                     39 	.globl _EX1
                                     40 	.globl _ET1
                                     41 	.globl _ES
                                     42 	.globl _EA
                                     43 	.globl _IT0
                                     44 	.globl _IE0
                                     45 	.globl _IT1
                                     46 	.globl _IE1
                                     47 	.globl _TR0
                                     48 	.globl _TF0
                                     49 	.globl _TR1
                                     50 	.globl _TF1
                                     51 	.globl _P
                                     52 	.globl _OV
                                     53 	.globl _RS0
                                     54 	.globl _RS1
                                     55 	.globl _F0
                                     56 	.globl _AC
                                     57 	.globl _CY
                                     58 	.globl _SBUF
                                     59 	.globl _SCON
                                     60 	.globl _IP
                                     61 	.globl _IE
                                     62 	.globl _TH1
                                     63 	.globl _TH0
                                     64 	.globl _TL1
                                     65 	.globl _TL0
                                     66 	.globl _TMOD
                                     67 	.globl _TCON
                                     68 	.globl _PCON
                                     69 	.globl _DPH
                                     70 	.globl _DPL
                                     71 	.globl _SP
                                     72 	.globl _B
                                     73 	.globl _ACC
                                     74 	.globl _PSW
                                     75 	.globl _P3
                                     76 	.globl _P2
                                     77 	.globl _P1
                                     78 	.globl _P0
                                     79 	.globl _PRAMCTL
                                     80 	.globl _BANK2PAH
                                     81 	.globl _BANK2PAL
                                     82 	.globl _BANK2VA
                                     83 	.globl _BANK1PAH
                                     84 	.globl _BANK1PAL
                                     85 	.globl _BANK1VA
                                     86 	.globl _BANK0PAH
                                     87 	.globl _BANK0PAL
                                     88 	.globl _WARMSTATUS
                                     89 	.globl _GPIO0OUT
                                     90 	.globl _GPIO0DIR
                                     91 	.globl _DMACMD
                                     92 	.globl _DMAFILL3
                                     93 	.globl _DMAFILL2
                                     94 	.globl _DMAFILL1
                                     95 	.globl _DMAFILL0
                                     96 	.globl _DMASIZEH
                                     97 	.globl _DMASIZEM
                                     98 	.globl _DMASIZEL
                                     99 	.globl _DMADSTH
                                    100 	.globl _DMADSTM
                                    101 	.globl _DMADSTL
                                    102 	.globl _DMASRCH
                                    103 	.globl _DMASRCM
                                    104 	.globl _DMASRCL
                                    105 	.globl _NANDCSDIR
                                    106 	.globl _NANDCSOUT
                                    107 	.globl _EP4
                                    108 	.globl _EP3
                                    109 	.globl _EP2
                                    110 	.globl _EP1
                                    111 	.globl _EP0
                                    112 	.globl _SETUPDAT
                                    113 	.globl _EP0CS
                                    114 	.globl _EPIE
                                    115 	.globl _EPIRQ
                                    116 	.globl _USBIRQ
                                    117 	.globl _USBSTAT
                                    118 	.globl _USBCTL
                                    119 	.globl _REGBANK
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 	.area RSEG    (ABS,DATA)
      000000                        124 	.org 0x0000
                           000080   125 _P0	=	0x0080
                           000090   126 _P1	=	0x0090
                           0000A0   127 _P2	=	0x00a0
                           0000B0   128 _P3	=	0x00b0
                           0000D0   129 _PSW	=	0x00d0
                           0000E0   130 _ACC	=	0x00e0
                           0000F0   131 _B	=	0x00f0
                           000081   132 _SP	=	0x0081
                           000082   133 _DPL	=	0x0082
                           000083   134 _DPH	=	0x0083
                           000087   135 _PCON	=	0x0087
                           000088   136 _TCON	=	0x0088
                           000089   137 _TMOD	=	0x0089
                           00008A   138 _TL0	=	0x008a
                           00008B   139 _TL1	=	0x008b
                           00008C   140 _TH0	=	0x008c
                           00008D   141 _TH1	=	0x008d
                           0000A8   142 _IE	=	0x00a8
                           0000B8   143 _IP	=	0x00b8
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           0000D7   151 _CY	=	0x00d7
                           0000D6   152 _AC	=	0x00d6
                           0000D5   153 _F0	=	0x00d5
                           0000D4   154 _RS1	=	0x00d4
                           0000D3   155 _RS0	=	0x00d3
                           0000D2   156 _OV	=	0x00d2
                           0000D0   157 _P	=	0x00d0
                           00008F   158 _TF1	=	0x008f
                           00008E   159 _TR1	=	0x008e
                           00008D   160 _TF0	=	0x008d
                           00008C   161 _TR0	=	0x008c
                           00008B   162 _IE1	=	0x008b
                           00008A   163 _IT1	=	0x008a
                           000089   164 _IE0	=	0x0089
                           000088   165 _IT0	=	0x0088
                           0000AF   166 _EA	=	0x00af
                           0000AC   167 _ES	=	0x00ac
                           0000AB   168 _ET1	=	0x00ab
                           0000AA   169 _EX1	=	0x00aa
                           0000A9   170 _ET0	=	0x00a9
                           0000A8   171 _EX0	=	0x00a8
                           0000BC   172 _PS	=	0x00bc
                           0000BB   173 _PT1	=	0x00bb
                           0000BA   174 _PX1	=	0x00ba
                           0000B9   175 _PT0	=	0x00b9
                           0000B8   176 _PX0	=	0x00b8
                           0000B7   177 _RD	=	0x00b7
                           0000B6   178 _WR	=	0x00b6
                           0000B5   179 _T1	=	0x00b5
                           0000B4   180 _T0	=	0x00b4
                           0000B3   181 _INT1	=	0x00b3
                           0000B2   182 _INT0	=	0x00b2
                           0000B1   183 _TXD	=	0x00b1
                           0000B0   184 _RXD	=	0x00b0
                           00009F   185 _SM0	=	0x009f
                           00009E   186 _SM1	=	0x009e
                           00009D   187 _SM2	=	0x009d
                           00009C   188 _REN	=	0x009c
                           00009B   189 _TB8	=	0x009b
                           00009A   190 _RB8	=	0x009a
                           000099   191 _TI	=	0x0099
                           000098   192 _RI	=	0x0098
                                    193 ;--------------------------------------------------------
                                    194 ; overlayable register banks
                                    195 ;--------------------------------------------------------
                                    196 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        197 	.ds 8
                                    198 ;--------------------------------------------------------
                                    199 ; internal ram data
                                    200 ;--------------------------------------------------------
                                    201 	.area DSEG    (DATA)
                                    202 ;--------------------------------------------------------
                                    203 ; overlayable items in internal ram 
                                    204 ;--------------------------------------------------------
                                    205 ;--------------------------------------------------------
                                    206 ; indirectly addressable internal ram data
                                    207 ;--------------------------------------------------------
                                    208 	.area ISEG    (DATA)
                                    209 ;--------------------------------------------------------
                                    210 ; absolute internal ram data
                                    211 ;--------------------------------------------------------
                                    212 	.area IABS    (ABS,DATA)
                                    213 	.area IABS    (ABS,DATA)
                                    214 ;--------------------------------------------------------
                                    215 ; bit data
                                    216 ;--------------------------------------------------------
                                    217 	.area BSEG    (BIT)
                                    218 ;--------------------------------------------------------
                                    219 ; paged external ram data
                                    220 ;--------------------------------------------------------
                                    221 	.area PSEG    (PAG,XDATA)
                                    222 ;--------------------------------------------------------
                                    223 ; external ram data
                                    224 ;--------------------------------------------------------
                                    225 	.area XSEG    (XDATA)
                           00F000   226 _REGBANK	=	0xf000
                           00F008   227 _USBCTL	=	0xf008
                           00F009   228 _USBSTAT	=	0xf009
                           00F027   229 _USBIRQ	=	0xf027
                           00F020   230 _EPIRQ	=	0xf020
                           00F030   231 _EPIE	=	0xf030
                           00F048   232 _EP0CS	=	0xf048
                           00F0B8   233 _SETUPDAT	=	0xf0b8
                           00F1C0   234 _EP0	=	0xf1c0
                           00F200   235 _EP1	=	0xf200
                           00F240   236 _EP2	=	0xf240
                           00F280   237 _EP3	=	0xf280
                           00F2C0   238 _EP4	=	0xf2c0
                           00F608   239 _NANDCSOUT	=	0xf608
                           00F618   240 _NANDCSDIR	=	0xf618
                           00F900   241 _DMASRCL	=	0xf900
                           00F901   242 _DMASRCM	=	0xf901
                           00F902   243 _DMASRCH	=	0xf902
                           00F904   244 _DMADSTL	=	0xf904
                           00F905   245 _DMADSTM	=	0xf905
                           00F906   246 _DMADSTH	=	0xf906
                           00F908   247 _DMASIZEL	=	0xf908
                           00F909   248 _DMASIZEM	=	0xf909
                           00F90A   249 _DMASIZEH	=	0xf90a
                           00F90C   250 _DMAFILL0	=	0xf90c
                           00F90D   251 _DMAFILL1	=	0xf90d
                           00F90E   252 _DMAFILL2	=	0xf90e
                           00F90F   253 _DMAFILL3	=	0xf90f
                           00F930   254 _DMACMD	=	0xf930
                           00FA14   255 _GPIO0DIR	=	0xfa14
                           00FA15   256 _GPIO0OUT	=	0xfa15
                           00FA38   257 _WARMSTATUS	=	0xfa38
                           00FA40   258 _BANK0PAL	=	0xfa40
                           00FA41   259 _BANK0PAH	=	0xfa41
                           00FA42   260 _BANK1VA	=	0xfa42
                           00FA43   261 _BANK1PAL	=	0xfa43
                           00FA44   262 _BANK1PAH	=	0xfa44
                           00FA45   263 _BANK2VA	=	0xfa45
                           00FA46   264 _BANK2PAL	=	0xfa46
                           00FA47   265 _BANK2PAH	=	0xfa47
                           00FA48   266 _PRAMCTL	=	0xfa48
                                    267 ;--------------------------------------------------------
                                    268 ; absolute external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XABS    (ABS,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; external initialized ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XISEG   (XDATA)
                                    275 	.area HOME    (CODE)
                                    276 	.area GSINIT0 (CODE)
                                    277 	.area GSINIT1 (CODE)
                                    278 	.area GSINIT2 (CODE)
                                    279 	.area GSINIT3 (CODE)
                                    280 	.area GSINIT4 (CODE)
                                    281 	.area GSINIT5 (CODE)
                                    282 	.area GSINIT  (CODE)
                                    283 	.area GSFINAL (CODE)
                                    284 	.area CSEG    (CODE)
                                    285 ;--------------------------------------------------------
                                    286 ; global & static initialisations
                                    287 ;--------------------------------------------------------
                                    288 	.area HOME    (CODE)
                                    289 	.area GSINIT  (CODE)
                                    290 	.area GSFINAL (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 ;--------------------------------------------------------
                                    293 ; Home
                                    294 ;--------------------------------------------------------
                                    295 	.area HOME    (CODE)
                                    296 	.area HOME    (CODE)
                                    297 ;--------------------------------------------------------
                                    298 ; code
                                    299 ;--------------------------------------------------------
                                    300 	.area CSEG    (CODE)
                                    301 ;------------------------------------------------------------
                                    302 ;Allocation info for local variables in function 'EP0ACK'
                                    303 ;------------------------------------------------------------
                                    304 ;	control.c:80: void EP0ACK()
                                    305 ;	-----------------------------------------
                                    306 ;	 function EP0ACK
                                    307 ;	-----------------------------------------
      000000                        308 _EP0ACK:
                           000007   309 	ar7 = 0x07
                           000006   310 	ar6 = 0x06
                           000005   311 	ar5 = 0x05
                           000004   312 	ar4 = 0x04
                           000003   313 	ar3 = 0x03
                           000002   314 	ar2 = 0x02
                           000001   315 	ar1 = 0x01
                           000000   316 	ar0 = 0x00
                                    317 ;	control.c:82: EP0CS = bmEP0ACK;
      000000 90 F0 48         [24]  318 	mov	dptr,#_EP0CS
      000003 74 01            [12]  319 	mov	a,#0x01
      000005 F0               [24]  320 	movx	@dptr,a
                                    321 ;	control.c:83: }
      000006 22               [24]  322 	ret
                                    323 ;------------------------------------------------------------
                                    324 ;Allocation info for local variables in function 'SetAddress'
                                    325 ;------------------------------------------------------------
                                    326 ;ret                       Allocated to registers r7 
                                    327 ;------------------------------------------------------------
                                    328 ;	control.c:85: static BYTE SetAddress()
                                    329 ;	-----------------------------------------
                                    330 ;	 function SetAddress
                                    331 ;	-----------------------------------------
      000007                        332 _SetAddress:
                                    333 ;	control.c:87: BYTE ret = FALSE;
      000007 7F 00            [12]  334 	mov	r7,#0x00
                                    335 ;	control.c:89: if (wValue < 0x7F)
      000009 C3               [12]  336 	clr	c
      00000A E5*00            [12]  337 	mov	a,_wValue
      00000C 94 7F            [12]  338 	subb	a,#0x7f
      00000E E5*01            [12]  339 	mov	a,(_wValue + 1)
      000010 94 00            [12]  340 	subb	a,#0x00
      000012 50 05            [24]  341 	jnc	00102$
                                    342 ;	control.c:91: EP0ACK();
      000014 12r00r00         [24]  343 	lcall	_EP0ACK
                                    344 ;	control.c:92: ret = TRUE;
      000017 7F 01            [12]  345 	mov	r7,#0x01
      000019                        346 00102$:
                                    347 ;	control.c:95: return ret;
      000019 8F 82            [24]  348 	mov	dpl,r7
                                    349 ;	control.c:96: }
      00001B 22               [24]  350 	ret
                                    351 ;------------------------------------------------------------
                                    352 ;Allocation info for local variables in function 'GetDescriptor'
                                    353 ;------------------------------------------------------------
                                    354 ;type                      Allocated to registers r7 
                                    355 ;i                         Allocated to registers r7 
                                    356 ;total                     Allocated to registers r5 
                                    357 ;ret                       Allocated to registers r6 
                                    358 ;------------------------------------------------------------
                                    359 ;	control.c:98: static BYTE GetDescriptor()
                                    360 ;	-----------------------------------------
                                    361 ;	 function GetDescriptor
                                    362 ;	-----------------------------------------
      00001C                        363 _GetDescriptor:
                                    364 ;	control.c:100: BYTE type = (wValue >> 8) & 0xFF;
      00001C AF*01            [24]  365 	mov	r7,(_wValue + 1)
                                    366 ;	control.c:102: BYTE ret = FALSE;
      00001E 7E 00            [12]  367 	mov	r6,#0x00
                                    368 ;	control.c:104: switch (type)
      000020 BF 01 02         [24]  369 	cjne	r7,#0x01,00198$
      000023 80 14            [24]  370 	sjmp	00134$
      000025                        371 00198$:
      000025 BF 02 02         [24]  372 	cjne	r7,#0x02,00199$
      000028 80 40            [24]  373 	sjmp	00103$
      00002A                        374 00199$:
      00002A BF 06 03         [24]  375 	cjne	r7,#0x06,00200$
      00002D 02r00rA0         [24]  376 	ljmp	00140$
      000030                        377 00200$:
      000030 BF 22 03         [24]  378 	cjne	r7,#0x22,00201$
      000033 02r00rD0         [24]  379 	ljmp	00143$
      000036                        380 00201$:
      000036 02r00rFE         [24]  381 	ljmp	00110$
                                    382 ;	control.c:108: for (i = 0; i < 0x12; i++)
      000039                        383 00134$:
      000039 7F 00            [12]  384 	mov	r7,#0x00
      00003B                        385 00111$:
                                    386 ;	control.c:110: EP0.fifo = deviceDescriptor[i];
      00003B EF               [12]  387 	mov	a,r7
      00003C 90r00r00         [24]  388 	mov	dptr,#_deviceDescriptor
      00003F 93               [24]  389 	movc	a,@a+dptr
      000040 90 F1 DC         [24]  390 	mov	dptr,#(_EP0 + 0x001c)
      000043 F0               [24]  391 	movx	@dptr,a
                                    392 ;	control.c:108: for (i = 0; i < 0x12; i++)
      000044 0F               [12]  393 	inc	r7
      000045 BF 12 00         [24]  394 	cjne	r7,#0x12,00202$
      000048                        395 00202$:
                                    396 ;	control.c:113: SendControlResponse(wLength < 0x12 ? wLength : 0x12);
      000048 40 F1            [24]  397 	jc	00111$
      00004A E5*00            [12]  398 	mov	a,_wLength
      00004C 94 12            [12]  399 	subb	a,#0x12
      00004E E5*01            [12]  400 	mov	a,(_wLength + 1)
      000050 94 00            [12]  401 	subb	a,#0x00
      000052 50 06            [24]  402 	jnc	00122$
      000054 AD*00            [24]  403 	mov	r5,_wLength
      000056 AF*01            [24]  404 	mov	r7,(_wLength + 1)
      000058 80 04            [24]  405 	sjmp	00123$
      00005A                        406 00122$:
      00005A 7D 12            [12]  407 	mov	r5,#0x12
      00005C 7F 00            [12]  408 	mov	r7,#0x00
      00005E                        409 00123$:
      00005E 8D 82            [24]  410 	mov	dpl,r5
      000060 8F 83            [24]  411 	mov	dph,r7
      000062 12r00r00         [24]  412 	lcall	_SendControlResponse
                                    413 ;	control.c:114: ret = TRUE;
      000065 7E 01            [12]  414 	mov	r6,#0x01
                                    415 ;	control.c:116: break;
      000067 02r00rFE         [24]  416 	ljmp	00110$
                                    417 ;	control.c:118: case 0x02:
      00006A                        418 00103$:
                                    419 ;	control.c:120: total = wLength < sizeof(configDescriptor) ? wLength : sizeof(configDescriptor);
      00006A C3               [12]  420 	clr	c
      00006B E5*00            [12]  421 	mov	a,_wLength
      00006D 94 37            [12]  422 	subb	a,#0x37
      00006F E5*01            [12]  423 	mov	a,(_wLength + 1)
      000071 94 00            [12]  424 	subb	a,#0x00
      000073 50 06            [24]  425 	jnc	00124$
      000075 AD*00            [24]  426 	mov	r5,_wLength
      000077 AF*01            [24]  427 	mov	r7,(_wLength + 1)
      000079 80 04            [24]  428 	sjmp	00125$
      00007B                        429 00124$:
      00007B 7D 37            [12]  430 	mov	r5,#0x37
      00007D 7F 00            [12]  431 	mov	r7,#0x00
      00007F                        432 00125$:
                                    433 ;	control.c:121: for (i = 0; i < total; i++)
      00007F 7F 00            [12]  434 	mov	r7,#0x00
      000081                        435 00114$:
      000081 C3               [12]  436 	clr	c
      000082 EF               [12]  437 	mov	a,r7
      000083 9D               [12]  438 	subb	a,r5
      000084 50 0D            [24]  439 	jnc	00104$
                                    440 ;	control.c:123: EP0.fifo = configDescriptor[i];
      000086 EF               [12]  441 	mov	a,r7
      000087 90r00r12         [24]  442 	mov	dptr,#_configDescriptor
      00008A 93               [24]  443 	movc	a,@a+dptr
      00008B FC               [12]  444 	mov	r4,a
      00008C 90 F1 DC         [24]  445 	mov	dptr,#(_EP0 + 0x001c)
      00008F F0               [24]  446 	movx	@dptr,a
                                    447 ;	control.c:121: for (i = 0; i < total; i++)
      000090 0F               [12]  448 	inc	r7
      000091 80 EE            [24]  449 	sjmp	00114$
      000093                        450 00104$:
                                    451 ;	control.c:126: SendControlResponse(total);
      000093 7F 00            [12]  452 	mov	r7,#0x00
      000095 8D 82            [24]  453 	mov	dpl,r5
      000097 8F 83            [24]  454 	mov	dph,r7
      000099 12r00r00         [24]  455 	lcall	_SendControlResponse
                                    456 ;	control.c:127: ret = TRUE;
      00009C 7E 01            [12]  457 	mov	r6,#0x01
                                    458 ;	control.c:129: break;
                                    459 ;	control.c:133: for (i = 0; i < sizeof(deviceQualifierDescriptor); i++)
      00009E 80 5E            [24]  460 	sjmp	00110$
      0000A0                        461 00140$:
      0000A0 7F 00            [12]  462 	mov	r7,#0x00
      0000A2                        463 00116$:
                                    464 ;	control.c:135: EP0.fifo = deviceQualifierDescriptor[i];
      0000A2 EF               [12]  465 	mov	a,r7
      0000A3 90r00rBC         [24]  466 	mov	dptr,#_deviceQualifierDescriptor
      0000A6 93               [24]  467 	movc	a,@a+dptr
      0000A7 90 F1 DC         [24]  468 	mov	dptr,#(_EP0 + 0x001c)
      0000AA F0               [24]  469 	movx	@dptr,a
                                    470 ;	control.c:133: for (i = 0; i < sizeof(deviceQualifierDescriptor); i++)
      0000AB 0F               [12]  471 	inc	r7
      0000AC BF 0A 00         [24]  472 	cjne	r7,#0x0a,00207$
      0000AF                        473 00207$:
                                    474 ;	control.c:138: SendControlResponse(wLength < sizeof(deviceQualifierDescriptor) ? wLength : sizeof(deviceQualifierDescriptor));
      0000AF 40 F1            [24]  475 	jc	00116$
      0000B1 E5*00            [12]  476 	mov	a,_wLength
      0000B3 94 0A            [12]  477 	subb	a,#0x0a
      0000B5 E5*01            [12]  478 	mov	a,(_wLength + 1)
      0000B7 94 00            [12]  479 	subb	a,#0x00
      0000B9 50 06            [24]  480 	jnc	00126$
      0000BB AD*00            [24]  481 	mov	r5,_wLength
      0000BD AF*01            [24]  482 	mov	r7,(_wLength + 1)
      0000BF 80 04            [24]  483 	sjmp	00127$
      0000C1                        484 00126$:
      0000C1 7D 0A            [12]  485 	mov	r5,#0x0a
      0000C3 7F 00            [12]  486 	mov	r7,#0x00
      0000C5                        487 00127$:
      0000C5 8D 82            [24]  488 	mov	dpl,r5
      0000C7 8F 83            [24]  489 	mov	dph,r7
      0000C9 12r00r00         [24]  490 	lcall	_SendControlResponse
                                    491 ;	control.c:139: ret = TRUE;
      0000CC 7E 01            [12]  492 	mov	r6,#0x01
                                    493 ;	control.c:141: break;
                                    494 ;	control.c:145: for (i = 0; i < sizeof(HIDreportDescriptor); i++)
      0000CE 80 2E            [24]  495 	sjmp	00110$
      0000D0                        496 00143$:
      0000D0 7F 00            [12]  497 	mov	r7,#0x00
      0000D2                        498 00118$:
                                    499 ;	control.c:147: EP0.fifo = HIDreportDescriptor[i];
      0000D2 EF               [12]  500 	mov	a,r7
      0000D3 90r00r49         [24]  501 	mov	dptr,#_HIDreportDescriptor
      0000D6 93               [24]  502 	movc	a,@a+dptr
      0000D7 90 F1 DC         [24]  503 	mov	dptr,#(_EP0 + 0x001c)
      0000DA F0               [24]  504 	movx	@dptr,a
                                    505 ;	control.c:145: for (i = 0; i < sizeof(HIDreportDescriptor); i++)
      0000DB 0F               [12]  506 	inc	r7
      0000DC BF 3F 00         [24]  507 	cjne	r7,#0x3f,00210$
      0000DF                        508 00210$:
                                    509 ;	control.c:150: SendControlResponse(wLength < sizeof(HIDreportDescriptor) ? wLength : sizeof(HIDreportDescriptor));
      0000DF 40 F1            [24]  510 	jc	00118$
      0000E1 E5*00            [12]  511 	mov	a,_wLength
      0000E3 94 3F            [12]  512 	subb	a,#0x3f
      0000E5 E5*01            [12]  513 	mov	a,(_wLength + 1)
      0000E7 94 00            [12]  514 	subb	a,#0x00
      0000E9 50 06            [24]  515 	jnc	00128$
      0000EB AD*00            [24]  516 	mov	r5,_wLength
      0000ED AF*01            [24]  517 	mov	r7,(_wLength + 1)
      0000EF 80 04            [24]  518 	sjmp	00129$
      0000F1                        519 00128$:
      0000F1 7D 3F            [12]  520 	mov	r5,#0x3f
      0000F3 7F 00            [12]  521 	mov	r7,#0x00
      0000F5                        522 00129$:
      0000F5 8D 82            [24]  523 	mov	dpl,r5
      0000F7 8F 83            [24]  524 	mov	dph,r7
      0000F9 12r00r00         [24]  525 	lcall	_SendControlResponse
                                    526 ;	control.c:151: ret = TRUE;
      0000FC 7E 01            [12]  527 	mov	r6,#0x01
                                    528 ;	control.c:159: }
      0000FE                        529 00110$:
                                    530 ;	control.c:161: return ret;
      0000FE 8E 82            [24]  531 	mov	dpl,r6
                                    532 ;	control.c:162: }
      000100 22               [24]  533 	ret
                                    534 ;------------------------------------------------------------
                                    535 ;Allocation info for local variables in function 'SetConfiguration'
                                    536 ;------------------------------------------------------------
                                    537 ;ret                       Allocated to registers r7 
                                    538 ;------------------------------------------------------------
                                    539 ;	control.c:164: static BYTE SetConfiguration()
                                    540 ;	-----------------------------------------
                                    541 ;	 function SetConfiguration
                                    542 ;	-----------------------------------------
      000101                        543 _SetConfiguration:
                                    544 ;	control.c:166: BYTE ret = FALSE;
      000101 7F 00            [12]  545 	mov	r7,#0x00
                                    546 ;	control.c:168: if (wValue <= 1)
      000103 C3               [12]  547 	clr	c
      000104 74 01            [12]  548 	mov	a,#0x01
      000106 95*00            [12]  549 	subb	a,_wValue
      000108 E4               [12]  550 	clr	a
      000109 95*01            [12]  551 	subb	a,(_wValue + 1)
      00010B 40 05            [24]  552 	jc	00102$
                                    553 ;	control.c:170: EP0ACK();
      00010D 12r00r00         [24]  554 	lcall	_EP0ACK
                                    555 ;	control.c:171: ret = TRUE;
      000110 7F 01            [12]  556 	mov	r7,#0x01
      000112                        557 00102$:
                                    558 ;	control.c:174: return ret;
      000112 8F 82            [24]  559 	mov	dpl,r7
                                    560 ;	control.c:175: }
      000114 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'HandleStandardRequest'
                                    564 ;------------------------------------------------------------
                                    565 ;	control.c:177: BYTE HandleStandardRequest()
                                    566 ;	-----------------------------------------
                                    567 ;	 function HandleStandardRequest
                                    568 ;	-----------------------------------------
      000115                        569 _HandleStandardRequest:
                                    570 ;	control.c:179: switch(bRequest)
      000115 74 05            [12]  571 	mov	a,#0x05
      000117 B5*00 02         [24]  572 	cjne	a,_bRequest,00120$
      00011A 80 0E            [24]  573 	sjmp	00101$
      00011C                        574 00120$:
      00011C 74 06            [12]  575 	mov	a,#0x06
      00011E B5*00 02         [24]  576 	cjne	a,_bRequest,00121$
      000121 80 0A            [24]  577 	sjmp	00102$
      000123                        578 00121$:
      000123 74 09            [12]  579 	mov	a,#0x09
                                    580 ;	control.c:181: case 0x05:
      000125 B5*00 0B         [24]  581 	cjne	a,_bRequest,00104$
      000128 80 06            [24]  582 	sjmp	00103$
      00012A                        583 00101$:
                                    584 ;	control.c:183: return SetAddress();
                                    585 ;	control.c:185: case 0x06:
      00012A 02r00r07         [24]  586 	ljmp	_SetAddress
      00012D                        587 00102$:
                                    588 ;	control.c:187: return GetDescriptor();
                                    589 ;	control.c:189: case 0x09:
      00012D 02r00r1C         [24]  590 	ljmp	_GetDescriptor
      000130                        591 00103$:
                                    592 ;	control.c:191: return SetConfiguration();
                                    593 ;	control.c:193: default:
      000130 02r01r01         [24]  594 	ljmp	_SetConfiguration
      000133                        595 00104$:
                                    596 ;	control.c:195: return FALSE;
      000133 75 82 00         [24]  597 	mov	dpl,#0x00
                                    598 ;	control.c:197: }
                                    599 ;	control.c:198: }
      000136 22               [24]  600 	ret
                                    601 ;------------------------------------------------------------
                                    602 ;Allocation info for local variables in function 'GetMaxLUN'
                                    603 ;------------------------------------------------------------
                                    604 ;	control.c:200: static BYTE GetMaxLUN()
                                    605 ;	-----------------------------------------
                                    606 ;	 function GetMaxLUN
                                    607 ;	-----------------------------------------
      000137                        608 _GetMaxLUN:
                                    609 ;	control.c:202: EP0.fifo = 0x00;
      000137 90 F1 DC         [24]  610 	mov	dptr,#(_EP0 + 0x001c)
      00013A E4               [12]  611 	clr	a
      00013B F0               [24]  612 	movx	@dptr,a
                                    613 ;	control.c:203: SendControlResponse(wLength < 0x01 ? wLength : 0x01);
      00013C C3               [12]  614 	clr	c
      00013D E5*00            [12]  615 	mov	a,_wLength
      00013F 94 01            [12]  616 	subb	a,#0x01
      000141 E5*01            [12]  617 	mov	a,(_wLength + 1)
      000143 94 00            [12]  618 	subb	a,#0x00
      000145 50 06            [24]  619 	jnc	00103$
      000147 AE*00            [24]  620 	mov	r6,_wLength
      000149 AF*01            [24]  621 	mov	r7,(_wLength + 1)
      00014B 80 04            [24]  622 	sjmp	00104$
      00014D                        623 00103$:
      00014D 7E 01            [12]  624 	mov	r6,#0x01
      00014F 7F 00            [12]  625 	mov	r7,#0x00
      000151                        626 00104$:
      000151 8E 82            [24]  627 	mov	dpl,r6
      000153 8F 83            [24]  628 	mov	dph,r7
      000155 12r00r00         [24]  629 	lcall	_SendControlResponse
                                    630 ;	control.c:205: return TRUE;
      000158 75 82 01         [24]  631 	mov	dpl,#0x01
                                    632 ;	control.c:206: }
      00015B 22               [24]  633 	ret
                                    634 ;------------------------------------------------------------
                                    635 ;Allocation info for local variables in function 'HandleClassRequest'
                                    636 ;------------------------------------------------------------
                                    637 ;	control.c:208: BYTE HandleClassRequest()
                                    638 ;	-----------------------------------------
                                    639 ;	 function HandleClassRequest
                                    640 ;	-----------------------------------------
      00015C                        641 _HandleClassRequest:
                                    642 ;	control.c:210: switch(bRequest)
      00015C 74 09            [12]  643 	mov	a,#0x09
      00015E B5*00 02         [24]  644 	cjne	a,_bRequest,00120$
      000161 80 0E            [24]  645 	sjmp	00101$
      000163                        646 00120$:
      000163 74 0A            [12]  647 	mov	a,#0x0a
      000165 B5*00 02         [24]  648 	cjne	a,_bRequest,00121$
      000168 80 11            [24]  649 	sjmp	00102$
      00016A                        650 00121$:
      00016A 74 FE            [12]  651 	mov	a,#0xfe
                                    652 ;	control.c:212: case 0x09:
      00016C B5*00 16         [24]  653 	cjne	a,_bRequest,00104$
      00016F 80 11            [24]  654 	sjmp	00103$
      000171                        655 00101$:
                                    656 ;	control.c:214: EP0CS = 0x05;
      000171 90 F0 48         [24]  657 	mov	dptr,#_EP0CS
      000174 74 05            [12]  658 	mov	a,#0x05
      000176 F0               [24]  659 	movx	@dptr,a
                                    660 ;	control.c:215: return TRUE;
      000177 75 82 01         [24]  661 	mov	dpl,#0x01
                                    662 ;	control.c:217: case 0x0A:
      00017A 22               [24]  663 	ret
      00017B                        664 00102$:
                                    665 ;	control.c:219: EP0ACK();
      00017B 12r00r00         [24]  666 	lcall	_EP0ACK
                                    667 ;	control.c:220: return TRUE;
      00017E 75 82 01         [24]  668 	mov	dpl,#0x01
                                    669 ;	control.c:222: case 0xFE:
      000181 22               [24]  670 	ret
      000182                        671 00103$:
                                    672 ;	control.c:224: return GetMaxLUN();
                                    673 ;	control.c:226: default:
      000182 02r01r37         [24]  674 	ljmp	_GetMaxLUN
      000185                        675 00104$:
                                    676 ;	control.c:228: return FALSE;
      000185 75 82 00         [24]  677 	mov	dpl,#0x00
                                    678 ;	control.c:230: }
                                    679 ;	control.c:231: }
      000188 22               [24]  680 	ret
                                    681 ;------------------------------------------------------------
                                    682 ;Allocation info for local variables in function 'HandleVendorRequest'
                                    683 ;------------------------------------------------------------
                                    684 ;	control.c:233: BYTE HandleVendorRequest()
                                    685 ;	-----------------------------------------
                                    686 ;	 function HandleVendorRequest
                                    687 ;	-----------------------------------------
      000189                        688 _HandleVendorRequest:
                                    689 ;	control.c:235: return FALSE;
      000189 75 82 00         [24]  690 	mov	dpl,#0x00
                                    691 ;	control.c:236: }
      00018C 22               [24]  692 	ret
                                    693 	.area CSEG    (CODE)
                                    694 	.area CONST   (CODE)
      000000                        695 _deviceDescriptor:
      000000 12                     696 	.db #0x12	; 18
      000001 01                     697 	.db #0x01	; 1
      000002 00                     698 	.db #0x00	; 0
      000003 02                     699 	.db #0x02	; 2
      000004 03                     700 	.db #0x03	; 3
      000005 01                     701 	.db #0x01	; 1
      000006 00                     702 	.db #0x00	; 0
      000007 40                     703 	.db #0x40	; 64
      000008 B4                     704 	.db #0xb4	; 180
      000009 04                     705 	.db #0x04	; 4
      00000A 05                     706 	.db #0x05	; 5
      00000B 66                     707 	.db #0x66	; 102	'f'
      00000C 00                     708 	.db #0x00	; 0
      00000D 00                     709 	.db #0x00	; 0
      00000E 00                     710 	.db #0x00	; 0
      00000F 00                     711 	.db #0x00	; 0
      000010 00                     712 	.db #0x00	; 0
      000011 01                     713 	.db #0x01	; 1
      000012                        714 _configDescriptor:
      000012 09                     715 	.db #0x09	; 9
      000013 02                     716 	.db #0x02	; 2
      000014 37                     717 	.db #0x37	; 55	'7'
      000015 00                     718 	.db #0x00	; 0
      000016 01                     719 	.db #0x01	; 1
      000017 01                     720 	.db #0x01	; 1
      000018 00                     721 	.db #0x00	; 0
      000019 80                     722 	.db #0x80	; 128
      00001A 4B                     723 	.db #0x4b	; 75	'K'
      00001B 09                     724 	.db #0x09	; 9
      00001C 04                     725 	.db #0x04	; 4
      00001D 00                     726 	.db #0x00	; 0
      00001E 00                     727 	.db #0x00	; 0
      00001F 04                     728 	.db #0x04	; 4
      000020 03                     729 	.db #0x03	; 3
      000021 01                     730 	.db #0x01	; 1
      000022 01                     731 	.db #0x01	; 1
      000023 00                     732 	.db #0x00	; 0
      000024 09                     733 	.db #0x09	; 9
      000025 21                     734 	.db #0x21	; 33
      000026 01                     735 	.db #0x01	; 1
      000027 01                     736 	.db #0x01	; 1
      000028 00                     737 	.db #0x00	; 0
      000029 01                     738 	.db #0x01	; 1
      00002A 22                     739 	.db #0x22	; 34
      00002B 3F                     740 	.db #0x3f	; 63
      00002C 00                     741 	.db #0x00	; 0
      00002D 07                     742 	.db #0x07	; 7
      00002E 05                     743 	.db #0x05	; 5
      00002F 81                     744 	.db #0x81	; 129
      000030 00                     745 	.db #0x00	; 0
      000031 08                     746 	.db #0x08	; 8
      000032 00                     747 	.db #0x00	; 0
      000033 00                     748 	.db #0x00	; 0
      000034 07                     749 	.db #0x07	; 7
      000035 05                     750 	.db #0x05	; 5
      000036 02                     751 	.db #0x02	; 2
      000037 00                     752 	.db #0x00	; 0
      000038 08                     753 	.db #0x08	; 8
      000039 00                     754 	.db #0x00	; 0
      00003A 00                     755 	.db #0x00	; 0
      00003B 07                     756 	.db #0x07	; 7
      00003C 05                     757 	.db #0x05	; 5
      00003D 83                     758 	.db #0x83	; 131
      00003E 03                     759 	.db #0x03	; 3
      00003F 08                     760 	.db #0x08	; 8
      000040 00                     761 	.db #0x00	; 0
      000041 00                     762 	.db #0x00	; 0
      000042 07                     763 	.db #0x07	; 7
      000043 05                     764 	.db #0x05	; 5
      000044 04                     765 	.db #0x04	; 4
      000045 03                     766 	.db #0x03	; 3
      000046 08                     767 	.db #0x08	; 8
      000047 00                     768 	.db #0x00	; 0
      000048 01                     769 	.db #0x01	; 1
      000049                        770 _HIDreportDescriptor:
      000049 05                     771 	.db #0x05	; 5
      00004A 01                     772 	.db #0x01	; 1
      00004B 09                     773 	.db #0x09	; 9
      00004C 06                     774 	.db #0x06	; 6
      00004D A1                     775 	.db #0xa1	; 161
      00004E 01                     776 	.db #0x01	; 1
      00004F 05                     777 	.db #0x05	; 5
      000050 07                     778 	.db #0x07	; 7
      000051 19                     779 	.db #0x19	; 25
      000052 E0                     780 	.db #0xe0	; 224
      000053 29                     781 	.db #0x29	; 41
      000054 E7                     782 	.db #0xe7	; 231
      000055 15                     783 	.db #0x15	; 21
      000056 00                     784 	.db #0x00	; 0
      000057 25                     785 	.db #0x25	; 37
      000058 01                     786 	.db #0x01	; 1
      000059 75                     787 	.db #0x75	; 117	'u'
      00005A 01                     788 	.db #0x01	; 1
      00005B 95                     789 	.db #0x95	; 149
      00005C 08                     790 	.db #0x08	; 8
      00005D 81                     791 	.db #0x81	; 129
      00005E 02                     792 	.db #0x02	; 2
      00005F 95                     793 	.db #0x95	; 149
      000060 01                     794 	.db #0x01	; 1
      000061 75                     795 	.db #0x75	; 117	'u'
      000062 08                     796 	.db #0x08	; 8
      000063 81                     797 	.db #0x81	; 129
      000064 01                     798 	.db #0x01	; 1
      000065 95                     799 	.db #0x95	; 149
      000066 05                     800 	.db #0x05	; 5
      000067 75                     801 	.db #0x75	; 117	'u'
      000068 01                     802 	.db #0x01	; 1
      000069 05                     803 	.db #0x05	; 5
      00006A 08                     804 	.db #0x08	; 8
      00006B 19                     805 	.db #0x19	; 25
      00006C 01                     806 	.db #0x01	; 1
      00006D 29                     807 	.db #0x29	; 41
      00006E 05                     808 	.db #0x05	; 5
      00006F 91                     809 	.db #0x91	; 145
      000070 02                     810 	.db #0x02	; 2
      000071 95                     811 	.db #0x95	; 149
      000072 01                     812 	.db #0x01	; 1
      000073 75                     813 	.db #0x75	; 117	'u'
      000074 03                     814 	.db #0x03	; 3
      000075 91                     815 	.db #0x91	; 145
      000076 01                     816 	.db #0x01	; 1
      000077 95                     817 	.db #0x95	; 149
      000078 06                     818 	.db #0x06	; 6
      000079 75                     819 	.db #0x75	; 117	'u'
      00007A 08                     820 	.db #0x08	; 8
      00007B 15                     821 	.db #0x15	; 21
      00007C 00                     822 	.db #0x00	; 0
      00007D 25                     823 	.db #0x25	; 37
      00007E 65                     824 	.db #0x65	; 101	'e'
      00007F 05                     825 	.db #0x05	; 5
      000080 07                     826 	.db #0x07	; 7
      000081 19                     827 	.db #0x19	; 25
      000082 00                     828 	.db #0x00	; 0
      000083 29                     829 	.db #0x29	; 41
      000084 65                     830 	.db #0x65	; 101	'e'
      000085 81                     831 	.db #0x81	; 129
      000086 00                     832 	.db #0x00	; 0
      000087 C0                     833 	.db #0xc0	; 192
      000088                        834 _HIDreportDescriptorMouse:
      000088 05                     835 	.db #0x05	; 5
      000089 01                     836 	.db #0x01	; 1
      00008A 09                     837 	.db #0x09	; 9
      00008B 02                     838 	.db #0x02	; 2
      00008C A1                     839 	.db #0xa1	; 161
      00008D 01                     840 	.db #0x01	; 1
      00008E 09                     841 	.db #0x09	; 9
      00008F 01                     842 	.db #0x01	; 1
      000090 A1                     843 	.db #0xa1	; 161
      000091 00                     844 	.db #0x00	; 0
      000092 05                     845 	.db #0x05	; 5
      000093 09                     846 	.db #0x09	; 9
      000094 19                     847 	.db #0x19	; 25
      000095 01                     848 	.db #0x01	; 1
      000096 29                     849 	.db #0x29	; 41
      000097 03                     850 	.db #0x03	; 3
      000098 15                     851 	.db #0x15	; 21
      000099 00                     852 	.db #0x00	; 0
      00009A 25                     853 	.db #0x25	; 37
      00009B 01                     854 	.db #0x01	; 1
      00009C 95                     855 	.db #0x95	; 149
      00009D 03                     856 	.db #0x03	; 3
      00009E 75                     857 	.db #0x75	; 117	'u'
      00009F 01                     858 	.db #0x01	; 1
      0000A0 81                     859 	.db #0x81	; 129
      0000A1 02                     860 	.db #0x02	; 2
      0000A2 95                     861 	.db #0x95	; 149
      0000A3 01                     862 	.db #0x01	; 1
      0000A4 75                     863 	.db #0x75	; 117	'u'
      0000A5 05                     864 	.db #0x05	; 5
      0000A6 81                     865 	.db #0x81	; 129
      0000A7 03                     866 	.db #0x03	; 3
      0000A8 05                     867 	.db #0x05	; 5
      0000A9 01                     868 	.db #0x01	; 1
      0000AA 09                     869 	.db #0x09	; 9
      0000AB 30                     870 	.db #0x30	; 48	'0'
      0000AC 09                     871 	.db #0x09	; 9
      0000AD 31                     872 	.db #0x31	; 49	'1'
      0000AE 09                     873 	.db #0x09	; 9
      0000AF 38                     874 	.db #0x38	; 56	'8'
      0000B0 15                     875 	.db #0x15	; 21
      0000B1 81                     876 	.db #0x81	; 129
      0000B2 25                     877 	.db #0x25	; 37
      0000B3 7F                     878 	.db #0x7f	; 127
      0000B4 75                     879 	.db #0x75	; 117	'u'
      0000B5 08                     880 	.db #0x08	; 8
      0000B6 95                     881 	.db #0x95	; 149
      0000B7 03                     882 	.db #0x03	; 3
      0000B8 81                     883 	.db #0x81	; 129
      0000B9 06                     884 	.db #0x06	; 6
      0000BA C0                     885 	.db #0xc0	; 192
      0000BB C0                     886 	.db #0xc0	; 192
      0000BC                        887 _deviceQualifierDescriptor:
      0000BC 0A                     888 	.db #0x0a	; 10
      0000BD 06                     889 	.db #0x06	; 6
      0000BE 00                     890 	.db #0x00	; 0
      0000BF 02                     891 	.db #0x02	; 2
      0000C0 00                     892 	.db #0x00	; 0
      0000C1 00                     893 	.db #0x00	; 0
      0000C2 00                     894 	.db #0x00	; 0
      0000C3 40                     895 	.db #0x40	; 64
      0000C4 01                     896 	.db #0x01	; 1
      0000C5 00                     897 	.db #0x00	; 0
                                    898 	.area XINIT   (CODE)
                                    899 	.area CABS    (ABS,CODE)
